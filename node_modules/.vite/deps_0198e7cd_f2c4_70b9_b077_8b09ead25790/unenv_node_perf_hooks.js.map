{
  "version": 3,
  "sources": ["../../unenv/dist/runtime/node/internal/perf_hooks/histogram.mjs", "../../unenv/dist/runtime/node/internal/perf_hooks/performance.mjs", "../../unenv/dist/runtime/node/internal/perf_hooks/constants.mjs", "../../unenv/dist/runtime/node/perf_hooks.mjs"],
  "sourcesContent": ["import { createNotImplementedError } from \"../../../_internal/utils.mjs\";\r\nclass Histogram {\r\n\tmin = 0x8000000000000000;\r\n\tmax = 0;\r\n\tmean = Number.NaN;\r\n\texceeds = 0;\r\n\tstddev = Number.NaN;\r\n\tcount = 0;\r\n\tcountBigInt = BigInt(0);\r\n\texceedsBigInt = BigInt(0);\r\n\tmaxBigInt = 0;\r\n\tminBigInt = BigInt(9223372036854775807n);\r\n\tpercentiles = new Map();\r\n\tpercentilesBigInt = new Map();\r\n\tpercentileBigInt(_percentile) {\r\n\t\tthrow createNotImplementedError(\"Histogram.percentileBigInt\");\r\n\t}\r\n\tpercentile(percentile) {\r\n\t\treturn this.percentiles.get(percentile) ?? Number.NaN;\r\n\t}\r\n\treset() {\r\n\t\tthrow createNotImplementedError(\"Histogram.reset\");\r\n\t}\r\n}\r\nexport class IntervalHistogram extends Histogram {\r\n\tenable() {\r\n\t\treturn true;\r\n\t}\r\n\tdisable() {\r\n\t\treturn true;\r\n\t}\r\n}\r\nexport class RecordableHistogram extends Histogram {\r\n\trecord(val) {\r\n\t\tthrow createNotImplementedError(\"RecordableHistogram.record\");\r\n\t}\r\n\trecordDelta() {\r\n\t\tthrow createNotImplementedError(\"RecordableHistogram.recordDelta\");\r\n\t}\r\n\tadd(other) {\r\n\t\tthrow createNotImplementedError(\"RecordableHistogram.add\");\r\n\t}\r\n}\r\n", "import { createNotImplementedError } from \"../../../_internal/utils.mjs\";\r\nconst _timeOrigin = globalThis.performance?.timeOrigin ?? Date.now();\r\nconst _performanceNow = globalThis.performance?.now ? globalThis.performance.now.bind(globalThis.performance) : () => Date.now() - _timeOrigin;\r\nconst nodeTiming = {\r\n\tname: \"node\",\r\n\tentryType: \"node\",\r\n\tstartTime: 0,\r\n\tduration: 0,\r\n\tnodeStart: 0,\r\n\tv8Start: 0,\r\n\tbootstrapComplete: 0,\r\n\tenvironment: 0,\r\n\tloopStart: 0,\r\n\tloopExit: 0,\r\n\tidleTime: 0,\r\n\tuvMetricsInfo: {\r\n\t\tloopCount: 0,\r\n\t\tevents: 0,\r\n\t\teventsWaiting: 0\r\n\t},\r\n\tdetail: undefined,\r\n\ttoJSON() {\r\n\t\treturn this;\r\n\t}\r\n};\r\n// PerformanceEntry\r\nexport class PerformanceEntry {\r\n\t__unenv__ = true;\r\n\tdetail;\r\n\tentryType = \"event\";\r\n\tname;\r\n\tstartTime;\r\n\tconstructor(name, options) {\r\n\t\tthis.name = name;\r\n\t\tthis.startTime = options?.startTime || _performanceNow();\r\n\t\tthis.detail = options?.detail;\r\n\t}\r\n\tget duration() {\r\n\t\treturn _performanceNow() - this.startTime;\r\n\t}\r\n\ttoJSON() {\r\n\t\treturn {\r\n\t\t\tname: this.name,\r\n\t\t\tentryType: this.entryType,\r\n\t\t\tstartTime: this.startTime,\r\n\t\t\tduration: this.duration,\r\n\t\t\tdetail: this.detail\r\n\t\t};\r\n\t}\r\n}\r\n// PerformanceMark\r\nexport const PerformanceMark = class PerformanceMark extends PerformanceEntry {\r\n\tentryType = \"mark\";\r\n\tconstructor() {\r\n\t\t// @ts-ignore\r\n\t\tsuper(...arguments);\r\n\t}\r\n\tget duration() {\r\n\t\treturn 0;\r\n\t}\r\n};\r\n// PerformanceMark\r\nexport class PerformanceMeasure extends PerformanceEntry {\r\n\tentryType = \"measure\";\r\n}\r\n// PerformanceResourceTiming\r\nexport class PerformanceResourceTiming extends PerformanceEntry {\r\n\tentryType = \"resource\";\r\n\tserverTiming = [];\r\n\tconnectEnd = 0;\r\n\tconnectStart = 0;\r\n\tdecodedBodySize = 0;\r\n\tdomainLookupEnd = 0;\r\n\tdomainLookupStart = 0;\r\n\tencodedBodySize = 0;\r\n\tfetchStart = 0;\r\n\tinitiatorType = \"\";\r\n\tname = \"\";\r\n\tnextHopProtocol = \"\";\r\n\tredirectEnd = 0;\r\n\tredirectStart = 0;\r\n\trequestStart = 0;\r\n\tresponseEnd = 0;\r\n\tresponseStart = 0;\r\n\tsecureConnectionStart = 0;\r\n\tstartTime = 0;\r\n\ttransferSize = 0;\r\n\tworkerStart = 0;\r\n\tresponseStatus = 0;\r\n}\r\n// PerformanceObserverEntryList\r\nexport class PerformanceObserverEntryList {\r\n\t__unenv__ = true;\r\n\tgetEntries() {\r\n\t\treturn [];\r\n\t}\r\n\tgetEntriesByName(_name, _type) {\r\n\t\treturn [];\r\n\t}\r\n\tgetEntriesByType(type) {\r\n\t\treturn [];\r\n\t}\r\n}\r\n// Performance\r\nexport class Performance {\r\n\t__unenv__ = true;\r\n\ttimeOrigin = _timeOrigin;\r\n\teventCounts = new Map();\r\n\t_entries = [];\r\n\t_resourceTimingBufferSize = 0;\r\n\tnavigation = undefined;\r\n\ttiming = undefined;\r\n\ttimerify(_fn, _options) {\r\n\t\tthrow createNotImplementedError(\"Performance.timerify\");\r\n\t}\r\n\tget nodeTiming() {\r\n\t\treturn nodeTiming;\r\n\t}\r\n\teventLoopUtilization() {\r\n\t\treturn {};\r\n\t}\r\n\tmarkResourceTiming() {\r\n\t\t// TODO: create a new PerformanceResourceTiming entry\r\n\t\t// so that performance.getEntries, getEntriesByName, and getEntriesByType return it\r\n\t\t// see: https://nodejs.org/api/perf_hooks.html#performancemarkresourcetimingtiminginfo-requestedurl-initiatortype-global-cachemode-bodyinfo-responsestatus-deliverytype\r\n\t\treturn new PerformanceResourceTiming(\"\");\r\n\t}\r\n\tonresourcetimingbufferfull = null;\r\n\tnow() {\r\n\t\t// https://developer.mozilla.org/en-US/docs/Web/API/Performance/now\r\n\t\tif (this.timeOrigin === _timeOrigin) {\r\n\t\t\treturn _performanceNow();\r\n\t\t}\r\n\t\treturn Date.now() - this.timeOrigin;\r\n\t}\r\n\tclearMarks(markName) {\r\n\t\tthis._entries = markName ? this._entries.filter((e) => e.name !== markName) : this._entries.filter((e) => e.entryType !== \"mark\");\r\n\t}\r\n\tclearMeasures(measureName) {\r\n\t\tthis._entries = measureName ? this._entries.filter((e) => e.name !== measureName) : this._entries.filter((e) => e.entryType !== \"measure\");\r\n\t}\r\n\tclearResourceTimings() {\r\n\t\tthis._entries = this._entries.filter((e) => e.entryType !== \"resource\" || e.entryType !== \"navigation\");\r\n\t}\r\n\tgetEntries() {\r\n\t\treturn this._entries;\r\n\t}\r\n\tgetEntriesByName(name, type) {\r\n\t\treturn this._entries.filter((e) => e.name === name && (!type || e.entryType === type));\r\n\t}\r\n\tgetEntriesByType(type) {\r\n\t\treturn this._entries.filter((e) => e.entryType === type);\r\n\t}\r\n\tmark(name, options) {\r\n\t\t// @ts-expect-error constructor is not protected\r\n\t\tconst entry = new PerformanceMark(name, options);\r\n\t\tthis._entries.push(entry);\r\n\t\treturn entry;\r\n\t}\r\n\tmeasure(measureName, startOrMeasureOptions, endMark) {\r\n\t\tlet start;\r\n\t\tlet end;\r\n\t\tif (typeof startOrMeasureOptions === \"string\") {\r\n\t\t\tstart = this.getEntriesByName(startOrMeasureOptions, \"mark\")[0]?.startTime;\r\n\t\t\tend = this.getEntriesByName(endMark, \"mark\")[0]?.startTime;\r\n\t\t} else {\r\n\t\t\tstart = Number.parseFloat(startOrMeasureOptions?.start) || this.now();\r\n\t\t\tend = Number.parseFloat(startOrMeasureOptions?.end) || this.now();\r\n\t\t}\r\n\t\tconst entry = new PerformanceMeasure(measureName, {\r\n\t\t\tstartTime: start,\r\n\t\t\tdetail: {\r\n\t\t\t\tstart,\r\n\t\t\t\tend\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis._entries.push(entry);\r\n\t\treturn entry;\r\n\t}\r\n\tsetResourceTimingBufferSize(maxSize) {\r\n\t\tthis._resourceTimingBufferSize = maxSize;\r\n\t}\r\n\taddEventListener(type, listener, options) {\r\n\t\tthrow createNotImplementedError(\"Performance.addEventListener\");\r\n\t}\r\n\tremoveEventListener(type, listener, options) {\r\n\t\tthrow createNotImplementedError(\"Performance.removeEventListener\");\r\n\t}\r\n\tdispatchEvent(event) {\r\n\t\tthrow createNotImplementedError(\"Performance.dispatchEvent\");\r\n\t}\r\n\ttoJSON() {\r\n\t\treturn this;\r\n\t}\r\n}\r\n// PerformanceObserver\r\nexport class PerformanceObserver {\r\n\t__unenv__ = true;\r\n\tstatic supportedEntryTypes = [];\r\n\t_callback = null;\r\n\tconstructor(callback) {\r\n\t\tthis._callback = callback;\r\n\t}\r\n\ttakeRecords() {\r\n\t\treturn [];\r\n\t}\r\n\tdisconnect() {\r\n\t\tthrow createNotImplementedError(\"PerformanceObserver.disconnect\");\r\n\t}\r\n\tobserve(options) {\r\n\t\tthrow createNotImplementedError(\"PerformanceObserver.observe\");\r\n\t}\r\n\tbind(fn) {\r\n\t\treturn fn;\r\n\t}\r\n\trunInAsyncScope(fn, thisArg, ...args) {\r\n\t\treturn fn.call(thisArg, ...args);\r\n\t}\r\n\tasyncId() {\r\n\t\treturn 0;\r\n\t}\r\n\ttriggerAsyncId() {\r\n\t\treturn 0;\r\n\t}\r\n\temitDestroy() {\r\n\t\treturn this;\r\n\t}\r\n}\r\n// workerd implements a subset of globalThis.performance (as of last check, only timeOrigin set to 0 + now() implemented)\r\n// We already use performance.now() from globalThis.performance, if provided (see top of this file)\r\n// If we detect this condition, we can just use polyfill instead.\r\nexport const performance = globalThis.performance && \"addEventListener\" in globalThis.performance ? globalThis.performance : new Performance();\r\n", "// npx -y node@22.14 -e 'const {constants}=require(\"perf_hooks\");console.log(Object.entries(Object.getOwnPropertyDescriptors(constants)).map(([k,v]) => `export const ${k} = ${JSON.stringify(v.value)}`).join(\"\\n\"))'\r\nexport const NODE_PERFORMANCE_GC_MAJOR = 4;\r\nexport const NODE_PERFORMANCE_GC_MINOR = 1;\r\nexport const NODE_PERFORMANCE_GC_INCREMENTAL = 8;\r\nexport const NODE_PERFORMANCE_GC_WEAKCB = 16;\r\nexport const NODE_PERFORMANCE_GC_FLAGS_NO = 0;\r\nexport const NODE_PERFORMANCE_GC_FLAGS_CONSTRUCT_RETAINED = 2;\r\nexport const NODE_PERFORMANCE_GC_FLAGS_FORCED = 4;\r\nexport const NODE_PERFORMANCE_GC_FLAGS_SYNCHRONOUS_PHANTOM_PROCESSING = 8;\r\nexport const NODE_PERFORMANCE_GC_FLAGS_ALL_AVAILABLE_GARBAGE = 16;\r\nexport const NODE_PERFORMANCE_GC_FLAGS_ALL_EXTERNAL_MEMORY = 32;\r\nexport const NODE_PERFORMANCE_GC_FLAGS_SCHEDULE_IDLE = 64;\r\nexport const NODE_PERFORMANCE_ENTRY_TYPE_GC = 0;\r\nexport const NODE_PERFORMANCE_ENTRY_TYPE_HTTP = 1;\r\nexport const NODE_PERFORMANCE_ENTRY_TYPE_HTTP2 = 2;\r\nexport const NODE_PERFORMANCE_ENTRY_TYPE_NET = 3;\r\nexport const NODE_PERFORMANCE_ENTRY_TYPE_DNS = 4;\r\nexport const NODE_PERFORMANCE_MILESTONE_TIME_ORIGIN_TIMESTAMP = 0;\r\nexport const NODE_PERFORMANCE_MILESTONE_TIME_ORIGIN = 1;\r\nexport const NODE_PERFORMANCE_MILESTONE_ENVIRONMENT = 2;\r\nexport const NODE_PERFORMANCE_MILESTONE_NODE_START = 3;\r\nexport const NODE_PERFORMANCE_MILESTONE_V8_START = 4;\r\nexport const NODE_PERFORMANCE_MILESTONE_LOOP_START = 5;\r\nexport const NODE_PERFORMANCE_MILESTONE_LOOP_EXIT = 6;\r\nexport const NODE_PERFORMANCE_MILESTONE_BOOTSTRAP_COMPLETE = 7;\r\n", "import { IntervalHistogram, RecordableHistogram } from \"./internal/perf_hooks/histogram.mjs\";\r\nimport { performance, Performance, PerformanceEntry, PerformanceMark, PerformanceMeasure, PerformanceObserverEntryList, PerformanceObserver, PerformanceResourceTiming } from \"./internal/perf_hooks/performance.mjs\";\r\nexport * from \"./internal/perf_hooks/performance.mjs\";\r\n// prettier-ignore\r\nimport { NODE_PERFORMANCE_GC_MAJOR, NODE_PERFORMANCE_GC_MINOR, NODE_PERFORMANCE_GC_INCREMENTAL, NODE_PERFORMANCE_GC_WEAKCB, NODE_PERFORMANCE_GC_FLAGS_NO, NODE_PERFORMANCE_GC_FLAGS_CONSTRUCT_RETAINED, NODE_PERFORMANCE_GC_FLAGS_FORCED, NODE_PERFORMANCE_GC_FLAGS_SYNCHRONOUS_PHANTOM_PROCESSING, NODE_PERFORMANCE_GC_FLAGS_ALL_AVAILABLE_GARBAGE, NODE_PERFORMANCE_GC_FLAGS_ALL_EXTERNAL_MEMORY, NODE_PERFORMANCE_GC_FLAGS_SCHEDULE_IDLE, NODE_PERFORMANCE_ENTRY_TYPE_GC, NODE_PERFORMANCE_ENTRY_TYPE_HTTP, NODE_PERFORMANCE_ENTRY_TYPE_HTTP2, NODE_PERFORMANCE_ENTRY_TYPE_NET, NODE_PERFORMANCE_ENTRY_TYPE_DNS, NODE_PERFORMANCE_MILESTONE_TIME_ORIGIN_TIMESTAMP, NODE_PERFORMANCE_MILESTONE_TIME_ORIGIN, NODE_PERFORMANCE_MILESTONE_ENVIRONMENT, NODE_PERFORMANCE_MILESTONE_NODE_START, NODE_PERFORMANCE_MILESTONE_V8_START, NODE_PERFORMANCE_MILESTONE_LOOP_START, NODE_PERFORMANCE_MILESTONE_LOOP_EXIT, NODE_PERFORMANCE_MILESTONE_BOOTSTRAP_COMPLETE } from \"./internal/perf_hooks/constants.mjs\";\r\n// prettier-ignore\r\nexport const constants = {\r\n\tNODE_PERFORMANCE_GC_MAJOR,\r\n\tNODE_PERFORMANCE_GC_MINOR,\r\n\tNODE_PERFORMANCE_GC_INCREMENTAL,\r\n\tNODE_PERFORMANCE_GC_WEAKCB,\r\n\tNODE_PERFORMANCE_GC_FLAGS_NO,\r\n\tNODE_PERFORMANCE_GC_FLAGS_CONSTRUCT_RETAINED,\r\n\tNODE_PERFORMANCE_GC_FLAGS_FORCED,\r\n\tNODE_PERFORMANCE_GC_FLAGS_SYNCHRONOUS_PHANTOM_PROCESSING,\r\n\tNODE_PERFORMANCE_GC_FLAGS_ALL_AVAILABLE_GARBAGE,\r\n\tNODE_PERFORMANCE_GC_FLAGS_ALL_EXTERNAL_MEMORY,\r\n\tNODE_PERFORMANCE_GC_FLAGS_SCHEDULE_IDLE,\r\n\tNODE_PERFORMANCE_ENTRY_TYPE_GC,\r\n\tNODE_PERFORMANCE_ENTRY_TYPE_HTTP,\r\n\tNODE_PERFORMANCE_ENTRY_TYPE_HTTP2,\r\n\tNODE_PERFORMANCE_ENTRY_TYPE_NET,\r\n\tNODE_PERFORMANCE_ENTRY_TYPE_DNS,\r\n\tNODE_PERFORMANCE_MILESTONE_TIME_ORIGIN_TIMESTAMP,\r\n\tNODE_PERFORMANCE_MILESTONE_TIME_ORIGIN,\r\n\tNODE_PERFORMANCE_MILESTONE_ENVIRONMENT,\r\n\tNODE_PERFORMANCE_MILESTONE_NODE_START,\r\n\tNODE_PERFORMANCE_MILESTONE_V8_START,\r\n\tNODE_PERFORMANCE_MILESTONE_LOOP_START,\r\n\tNODE_PERFORMANCE_MILESTONE_LOOP_EXIT,\r\n\tNODE_PERFORMANCE_MILESTONE_BOOTSTRAP_COMPLETE\r\n};\r\nexport const monitorEventLoopDelay = function(_options) {\r\n\treturn new IntervalHistogram();\r\n};\r\nexport const createHistogram = function(_options) {\r\n\treturn new RecordableHistogram();\r\n};\r\nexport default {\r\n\tPerformance,\r\n\tPerformanceMark,\r\n\tPerformanceEntry,\r\n\tPerformanceMeasure,\r\n\tPerformanceObserverEntryList,\r\n\tPerformanceObserver,\r\n\tPerformanceResourceTiming,\r\n\tperformance,\r\n\tconstants,\r\n\tcreateHistogram,\r\n\tmonitorEventLoopDelay\r\n};\r\n"],
  "mappings": "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",
  "names": ["PerformanceMark"]
}
