{
  "version": 3,
  "sources": ["../../unenv/dist/runtime/node/internal/crypto/web.mjs", "../../unenv/dist/runtime/node/internal/crypto/node.mjs", "../../@cloudflare/unenv-preset/dist/runtime/node/crypto.mjs"],
  "sourcesContent": ["// https://nodejs.org/api/crypto.html\r\n// https://github.com/unjs/uncrypto\r\nexport const subtle = globalThis.crypto?.subtle;\r\nexport const randomUUID = () => {\r\n\treturn globalThis.crypto?.randomUUID();\r\n};\r\nexport const getRandomValues = (array) => {\r\n\treturn globalThis.crypto?.getRandomValues(array);\r\n};\r\n", "import { notImplemented, notImplementedClass } from \"../../../_internal/utils.mjs\";\r\nimport { getRandomValues } from \"./web.mjs\";\r\n// limit of Crypto.getRandomValues()\r\n// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues\r\nconst MAX_RANDOM_VALUE_BYTES = 65536;\r\n// ---- implemented Utils ----\r\nexport const webcrypto = new Proxy(globalThis.crypto, { get(_, key) {\r\n\tif (key === \"CryptoKey\") {\r\n\t\treturn globalThis.CryptoKey;\r\n\t}\r\n\tif (typeof globalThis.crypto[key] === \"function\") {\r\n\t\t// @ts-ignore\r\n\t\treturn globalThis.crypto[key].bind(globalThis.crypto);\r\n\t}\r\n\treturn globalThis.crypto[key];\r\n} });\r\nexport const randomBytes = (size, cb) => {\r\n\tconst bytes = Buffer.alloc(size, 0, undefined);\r\n\tfor (let generated = 0; generated < size; generated += MAX_RANDOM_VALUE_BYTES) {\r\n\t\tgetRandomValues(\r\n\t\t\t// Use subarray to get a view of the buffer\r\n\t\t\tUint8Array.prototype.subarray.call(bytes, generated, generated + MAX_RANDOM_VALUE_BYTES)\r\n\t\t);\r\n\t}\r\n\tif (typeof cb === \"function\") {\r\n\t\tcb(null, bytes);\r\n\t\treturn undefined;\r\n\t}\r\n\treturn bytes;\r\n};\r\nexport const rng = randomBytes;\r\nexport const prng = randomBytes;\r\n// ---- Constants ----\r\nexport const fips = false;\r\n// ---- Unimplemented utils ----\r\nexport const checkPrime = /* @__PURE__ */ notImplemented(\"crypto.checkPrime\");\r\nexport const checkPrimeSync = /* @__PURE__ */ notImplemented(\"crypto.checkPrimeSync\");\r\n/** @deprecated */\r\nexport const createCipher = /* @__PURE__ */ notImplemented(\"crypto.createCipher\");\r\n/** @deprecated */\r\nexport const createDecipher = /* @__PURE__ */ notImplemented(\"crypto.createDecipher\");\r\nexport const pseudoRandomBytes = /* @__PURE__ */ notImplemented(\"crypto.pseudoRandomBytes\");\r\nexport const createCipheriv = /* @__PURE__ */ notImplemented(\"crypto.createCipheriv\");\r\nexport const createDecipheriv = /* @__PURE__ */ notImplemented(\"crypto.createDecipheriv\");\r\nexport const createDiffieHellman = /* @__PURE__ */ notImplemented(\"crypto.createDiffieHellman\");\r\nexport const createDiffieHellmanGroup = /* @__PURE__ */ notImplemented(\"crypto.createDiffieHellmanGroup\");\r\nexport const createECDH = /* @__PURE__ */ notImplemented(\"crypto.createECDH\");\r\nexport const createHash = /* @__PURE__ */ notImplemented(\"crypto.createHash\");\r\nexport const createHmac = /* @__PURE__ */ notImplemented(\"crypto.createHmac\");\r\nexport const createPrivateKey = /* @__PURE__ */ notImplemented(\"crypto.createPrivateKey\");\r\nexport const createPublicKey = /* @__PURE__ */ notImplemented(\"crypto.createPublicKey\");\r\nexport const createSecretKey = /* @__PURE__ */ notImplemented(\"crypto.createSecretKey\");\r\nexport const createSign = /* @__PURE__ */ notImplemented(\"crypto.createSign\");\r\nexport const createVerify = /* @__PURE__ */ notImplemented(\"crypto.createVerify\");\r\nexport const diffieHellman = /* @__PURE__ */ notImplemented(\"crypto.diffieHellman\");\r\nexport const generatePrime = /* @__PURE__ */ notImplemented(\"crypto.generatePrime\");\r\nexport const generatePrimeSync = /* @__PURE__ */ notImplemented(\"crypto.generatePrimeSync\");\r\nexport const getCiphers = /* @__PURE__ */ notImplemented(\"crypto.getCiphers\");\r\nexport const getCipherInfo = /* @__PURE__ */ notImplemented(\"crypto.getCipherInfo\");\r\nexport const getCurves = /* @__PURE__ */ notImplemented(\"crypto.getCurves\");\r\nexport const getDiffieHellman = /* @__PURE__ */ notImplemented(\"crypto.getDiffieHellman\");\r\nexport const getHashes = /* @__PURE__ */ notImplemented(\"crypto.getHashes\");\r\nexport const hkdf = /* @__PURE__ */ notImplemented(\"crypto.hkdf\");\r\nexport const hkdfSync = /* @__PURE__ */ notImplemented(\"crypto.hkdfSync\");\r\nexport const pbkdf2 = /* @__PURE__ */ notImplemented(\"crypto.pbkdf2\");\r\nexport const pbkdf2Sync = /* @__PURE__ */ notImplemented(\"crypto.pbkdf2Sync\");\r\nexport const generateKeyPair = /* @__PURE__ */ notImplemented(\"crypto.generateKeyPair\");\r\nexport const generateKeyPairSync = /* @__PURE__ */ notImplemented(\"crypto.generateKeyPairSync\");\r\nexport const generateKey = /* @__PURE__ */ notImplemented(\"crypto.generateKey\");\r\nexport const generateKeySync = /* @__PURE__ */ notImplemented(\"crypto.generateKeySync\");\r\nexport const privateDecrypt = /* @__PURE__ */ notImplemented(\"crypto.privateDecrypt\");\r\nexport const privateEncrypt = /* @__PURE__ */ notImplemented(\"crypto.privateEncrypt\");\r\nexport const publicDecrypt = /* @__PURE__ */ notImplemented(\"crypto.publicDecrypt\");\r\nexport const publicEncrypt = /* @__PURE__ */ notImplemented(\"crypto.publicEncrypt\");\r\nexport const randomFill = /* @__PURE__ */ notImplemented(\"crypto.randomFill\");\r\nexport const randomFillSync = /* @__PURE__ */ notImplemented(\"crypto.randomFillSync\");\r\nexport const randomInt = /* @__PURE__ */ notImplemented(\"crypto.randomInt\");\r\nexport const scrypt = /* @__PURE__ */ notImplemented(\"crypto.scrypt\");\r\nexport const scryptSync = /* @__PURE__ */ notImplemented(\"crypto.scryptSync\");\r\nexport const sign = /* @__PURE__ */ notImplemented(\"crypto.sign\");\r\nexport const setEngine = /* @__PURE__ */ notImplemented(\"crypto.setEngine\");\r\nexport const timingSafeEqual = /* @__PURE__ */ notImplemented(\"crypto.timingSafeEqual\");\r\nexport const getFips = /* @__PURE__ */ notImplemented(\"crypto.getFips\");\r\nexport const setFips = /* @__PURE__ */ notImplemented(\"crypto.setFips\");\r\nexport const verify = /* @__PURE__ */ notImplemented(\"crypto.verify\");\r\nexport const secureHeapUsed = /* @__PURE__ */ notImplemented(\"crypto.secureHeapUsed\");\r\nexport const hash = /* @__PURE__ */ notImplemented(\"crypto.hash\");\r\n// ---- Unimplemented Classes ----\r\nexport const Certificate = /* @__PURE__ */ notImplementedClass(\"crypto.Certificate\");\r\nexport const Cipher = /* @__PURE__ */ notImplementedClass(\"crypto.Cipher\");\r\nexport const Cipheriv = /* @__PURE__ */ notImplementedClass(\r\n\t\"crypto.Cipheriv\"\r\n\t// @ts-expect-error not typed yet\r\n);\r\nexport const Decipher = /* @__PURE__ */ notImplementedClass(\"crypto.Decipher\");\r\nexport const Decipheriv = /* @__PURE__ */ notImplementedClass(\r\n\t\"crypto.Decipheriv\"\r\n\t// @ts-expect-error not typed yet\r\n);\r\nexport const DiffieHellman = /* @__PURE__ */ notImplementedClass(\"crypto.DiffieHellman\");\r\nexport const DiffieHellmanGroup = /* @__PURE__ */ notImplementedClass(\"crypto.DiffieHellmanGroup\");\r\nexport const ECDH = /* @__PURE__ */ notImplementedClass(\"crypto.ECDH\");\r\nexport const Hash = /* @__PURE__ */ notImplementedClass(\"crypto.Hash\");\r\nexport const Hmac = /* @__PURE__ */ notImplementedClass(\"crypto.Hmac\");\r\nexport const KeyObject = /* @__PURE__ */ notImplementedClass(\"crypto.KeyObject\");\r\nexport const Sign = /* @__PURE__ */ notImplementedClass(\"crypto.Sign\");\r\nexport const Verify = /* @__PURE__ */ notImplementedClass(\"crypto.Verify\");\r\nexport const X509Certificate = /* @__PURE__ */ notImplementedClass(\"crypto.X509Certificate\");\r\n", "import {\r\n  Cipher,\r\n  createCipher,\r\n  createDecipher,\r\n  Decipher,\r\n  pseudoRandomBytes,\r\n  webcrypto as unenvCryptoWebcrypto\r\n} from \"unenv/node/crypto\";\r\nexport { Cipher, Decipher } from \"unenv/node/crypto\";\r\nconst workerdCrypto = process.getBuiltinModule(\"node:crypto\");\r\nexport const {\r\n  Certificate,\r\n  checkPrime,\r\n  checkPrimeSync,\r\n  constants,\r\n  // @ts-expect-error  Node types do not match unenv\r\n  Cipheriv,\r\n  createCipheriv,\r\n  createDecipheriv,\r\n  createDiffieHellman,\r\n  createDiffieHellmanGroup,\r\n  createECDH,\r\n  createHash,\r\n  createHmac,\r\n  createPrivateKey,\r\n  createPublicKey,\r\n  createSecretKey,\r\n  createSign,\r\n  createVerify,\r\n  // @ts-expect-error  Node types do not match unenv\r\n  Decipheriv,\r\n  diffieHellman,\r\n  DiffieHellman,\r\n  DiffieHellmanGroup,\r\n  ECDH,\r\n  fips,\r\n  generateKey,\r\n  generateKeyPair,\r\n  generateKeyPairSync,\r\n  generateKeySync,\r\n  generatePrime,\r\n  generatePrimeSync,\r\n  getCipherInfo,\r\n  getCiphers,\r\n  getCurves,\r\n  getDiffieHellman,\r\n  getFips,\r\n  getHashes,\r\n  getRandomValues,\r\n  hash,\r\n  Hash,\r\n  hkdf,\r\n  hkdfSync,\r\n  Hmac,\r\n  KeyObject,\r\n  pbkdf2,\r\n  pbkdf2Sync,\r\n  privateDecrypt,\r\n  privateEncrypt,\r\n  publicDecrypt,\r\n  publicEncrypt,\r\n  randomBytes,\r\n  randomFill,\r\n  randomFillSync,\r\n  randomInt,\r\n  randomUUID,\r\n  scrypt,\r\n  scryptSync,\r\n  secureHeapUsed,\r\n  setEngine,\r\n  setFips,\r\n  sign,\r\n  Sign,\r\n  subtle,\r\n  timingSafeEqual,\r\n  verify,\r\n  Verify,\r\n  X509Certificate\r\n} = workerdCrypto;\r\nexport const webcrypto = {\r\n  // @ts-expect-error Node types do not match unenv\r\n  CryptoKey: unenvCryptoWebcrypto.CryptoKey,\r\n  getRandomValues,\r\n  randomUUID,\r\n  subtle\r\n};\r\nexport default {\r\n  /**\r\n   * manually unroll unenv-polyfilled-symbols to make it tree-shakeable\r\n   */\r\n  Certificate,\r\n  Cipher,\r\n  Cipheriv,\r\n  Decipher,\r\n  Decipheriv,\r\n  ECDH,\r\n  Sign,\r\n  Verify,\r\n  X509Certificate,\r\n  constants,\r\n  createCipheriv,\r\n  createDecipheriv,\r\n  createECDH,\r\n  createSign,\r\n  createVerify,\r\n  diffieHellman,\r\n  getCipherInfo,\r\n  hash,\r\n  privateDecrypt,\r\n  privateEncrypt,\r\n  publicDecrypt,\r\n  publicEncrypt,\r\n  scrypt,\r\n  scryptSync,\r\n  sign,\r\n  verify,\r\n  // default-only export from unenv\r\n  // @ts-expect-error unenv has unknown type\r\n  createCipher,\r\n  // @ts-expect-error unenv has unknown type\r\n  createDecipher,\r\n  // @ts-expect-error unenv has unknown type\r\n  pseudoRandomBytes,\r\n  /**\r\n   * manually unroll workerd-polyfilled-symbols to make it tree-shakeable\r\n   */\r\n  DiffieHellman,\r\n  DiffieHellmanGroup,\r\n  Hash,\r\n  Hmac,\r\n  KeyObject,\r\n  checkPrime,\r\n  checkPrimeSync,\r\n  createDiffieHellman,\r\n  createDiffieHellmanGroup,\r\n  createHash,\r\n  createHmac,\r\n  createPrivateKey,\r\n  createPublicKey,\r\n  createSecretKey,\r\n  generateKey,\r\n  generateKeyPair,\r\n  generateKeyPairSync,\r\n  generateKeySync,\r\n  generatePrime,\r\n  generatePrimeSync,\r\n  getCiphers,\r\n  getCurves,\r\n  getDiffieHellman,\r\n  getFips,\r\n  getHashes,\r\n  getRandomValues,\r\n  hkdf,\r\n  hkdfSync,\r\n  pbkdf2,\r\n  pbkdf2Sync,\r\n  randomBytes,\r\n  randomFill,\r\n  randomFillSync,\r\n  randomInt,\r\n  randomUUID,\r\n  secureHeapUsed,\r\n  setEngine,\r\n  setFips,\r\n  subtle,\r\n  timingSafeEqual,\r\n  // default-only export from workerd\r\n  fips,\r\n  // special-cased deep merged symbols\r\n  webcrypto\r\n};\r\n"],
  "mappings": "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",
  "names": ["Certificate", "checkPrime", "checkPrimeSync", "Cipheriv", "createCipheriv", "createDecipheriv", "createDiffieHellman", "createDiffieHellmanGroup", "createECDH", "createHash", "createHmac", "createPrivateKey", "createPublicKey", "createSecretKey", "createSign", "createVerify", "Decipheriv", "diffieHellman", "DiffieHellman", "DiffieHellmanGroup", "ECDH", "fips", "generateKey", "generateKeyPair", "generateKeyPairSync", "generateKeySync", "generatePrime", "generatePrimeSync", "getCipherInfo", "getCiphers", "getCurves", "getDiffieHellman", "getFips", "getHashes", "getRandomValues", "hash", "Hash", "hkdf", "hkdfSync", "Hmac", "KeyObject", "pbkdf2", "pbkdf2Sync", "privateDecrypt", "privateEncrypt", "publicDecrypt", "publicEncrypt", "randomBytes", "randomFill", "randomFillSync", "randomInt", "randomUUID", "scrypt", "scryptSync", "secureHeapUsed", "setEngine", "setFips", "sign", "Sign", "subtle", "timingSafeEqual", "verify", "Verify", "X509Certificate", "webcrypto"]
}
